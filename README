#1.参考文章
https://www.jianshu.com/p/e8c6938d1b27
https://juejin.im/post/5c501b395188252538065e45
https://github.com/haganWu/FingerprintLoginDemo/blob/master/app/src/main/java/com/hagan/fingerprint/FingerprintLoginFragment.java
https://www.jianshu.com/p/ed880f35f97f
https://blog.csdn.net/H176Nhx7/article/details/98686400 密钥
https://github.com/Tencent/soter
#2.用途分析
用于验证身份。
主要使用场景是
1.验证用户登录。
2.对于一些重要的，需要验证身份的操作。例如，支付宝每次支付的时候都可以使用指纹验证来通过支付操作
#3.注意
支付宝指纹支付标准是 IFAA ，腾讯的指纹支付标准是 SOTER，
也就是说没有其他应用方会使用这个标准。所以很看应用方和设备厂商的协商程度。
现在 IFAA 没有开源，只有 SOTER 是开源的了，如果接入，我们能省去兼容性测试的工作量，
而且有些 6.0 以下的机型 SOTER 也支持。还有！（星星眼）每个指纹将会有唯一 ID，
也就是说，我们能把账号和指纹绑定起来，更加安全

Google指纹
用 Google API，不管什么情况，只要验证的指纹是系统指纹列表里存在的，就验证通过，
Google API 是没有提供指纹唯一ID的，所以想要根据本机上的指纹索引来区别不同手指无法做到，
也就无法实现指纹和账号绑定。

指纹验证的领域模型
对于使用用户名密码登录过的用户
录入指纹->验证指纹
                --成功-->
                --失败-->最多验证5次，大于5次暂停指纹验证30秒

      
取消指纹验证，提示框，让用户选择是否取消指纹验证（取消指纹验证需要先验证身份才能取消，可以指纹，密码来验证）

对于类似支付的操作，如果要使用指纹验证，必须要将加密的密码和支付密码以及某些必须的信息传给后台，来验证当前指纹的有效性，
对于指纹登录的操作也是一样，需要在登录的时候，将帐户和密码等信息发送到后台验证，验证通过后才能让用户登录

需要考虑有多个用户的情况。
对于google api来说，只要系统之前有录入指纹，那么开启指纹验证的时候可以直接进行指纹验证
对于google api来说，如果app里的指纹验证失败次数过多，不仅会导致app短时间内无法验证，甚至手机锁屏指纹验证也会短时间内无法验证
验证重要操作的领域模型

Android Fingerprint API 通过谨慎地保留设备上安全硬件中包含的用户指纹特征来保护用户隐私。这可以防范恶意的入侵者，确保用户即使在不受信任的应用中也可以安全地使用他们的指纹。

Android 还可以为应用程序开发者提供保护，确保在正确识别用户指纹之后才授予用户对安全数据或资源的访问权限。这可防止篡改应用，从而为离线数据和在线交互提供加密级别的安全性。


此示例演示了如何使用非对称密钥对网上购物进行身份验证。如果您想了解如何使用对称密钥，请查看之前发布的 FingerprintDialog 示例。
下面形象地解释了如何使用对称密钥流程将 Android 应用、用户及后端完美地结合在一起：
当用户激活他们的指纹读取器时，实际上他们是在解锁一个由硬件支持的加密保险库。作为开发者，您可以根据应用程序的需求来选择在该保险库中存储哪些类型的关键资料
![avatar](E:\AndroidStudioProject\Camera2Basic\fingerprint_authentication\picture\fingerprint.png)


# 例子
```java
package com.lgy.testfingerprint;

import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.lgy.fingerprint.Authenticate;
import com.lgy.fingerprint.AuthenticationCallback;
import com.lgy.fingerprint.GoogleFingerprint;
import com.lgy.fingerprint.GoogleFingerprintAPI28;
import com.lgy.fingerprint.IAuthenticateAction;
import com.lgy.fingerprint.model.FingerprintBean;
import com.lgy.fingerprint.model.FingerprintData;
import com.lgy.fingerprint.view.CommonTipDialog;
import com.lgy.fingerprint.view.FingerprintVerifyDialog;

import static com.lgy.fingerprint.GoogleFingerprint.FINGERPRINT_AVAILABLE;

import androidx.appcompat.app.AppCompatActivity;


public class TestFingerprintActivity extends AppCompatActivity implements AuthenticationCallback, View.OnClickListener {

    private ImageView iv_fingerprint_login_switch;
    private TextView tv_nonsupport;
    private CommonTipDialog openFingerprintLoginTipDialog;
    private FingerprintVerifyDialog fingerprintVerifyDialog;
    private CommonTipDialog fingerprintVerifyErrorTipDialog;
    private CommonTipDialog closeFingerprintTipDialog;
    private boolean isOpen;

    private Authenticate authenticate;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fingerprint_layout);
        iv_fingerprint_login_switch = (ImageView) findViewById(R.id.iv_fingerprint_login_switch);
        tv_nonsupport = (TextView) findViewById(R.id.tv_nonsupport);
        iv_fingerprint_login_switch.setOnClickListener(this);

//        IAuthenticateAction helper = new GoogleFingerprint();
        IAuthenticateAction helper = new GoogleFingerprintAPI28();
        authenticate = new Authenticate.Builder()
                .buildContext(this)
                .buildAuthenticateAction(helper).build();
        isOpen = FingerprintData.getFingerprintOpened();
        authenticate.setCallBack(this);

        if (helper.isFingerprintAvailable() == FINGERPRINT_AVAILABLE) {
            //设备支持指纹登录
            tv_nonsupport.setVisibility(View.INVISIBLE);
            iv_fingerprint_login_switch.setEnabled(true);
            if (authenticate.isFingerprintOpened()) {
                new Handler(getMainLooper()).postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        openFingerprintLogin();
                    }
                },1000);
            }


        } else {
            //设备不支持指纹登录
            tv_nonsupport.setVisibility(View.VISIBLE);
            iv_fingerprint_login_switch.setEnabled(false);
        }

        setSwitchStatus();

        tv_nonsupport.postDelayed(new Runnable() {
            @Override
            public void run() {
                if (helper.isFingerprintAvailable() == FINGERPRINT_AVAILABLE &&
                        !isOpen) {
                    showOpenFingerprintLoginDialog();
                }
            }
        }, 500);
    }


    private void showOpenFingerprintLoginDialog() {
        if (openFingerprintLoginTipDialog == null) {
            openFingerprintLoginTipDialog = new CommonTipDialog(TestFingerprintActivity.this);
        }
        openFingerprintLoginTipDialog.setSingleButton(false);
        openFingerprintLoginTipDialog.setContentText("您的设备支持指纹登录,是否现在开启?");
        openFingerprintLoginTipDialog.setOnDialogButtonsClickListener(new CommonTipDialog.OnDialogButtonsClickListener() {
            @Override
            public void onCancelClick(View v) {

            }

            @Override
            public void onConfirmClick(View v) {
                openFingerprintLogin();
            }
        });
        openFingerprintLoginTipDialog.show();
    }

    /**
     * @description 开启指纹登录功能
     * @author lgygg
     */
    private void openFingerprintLogin() {
        Log.e("lgygg", "openFingerprintLogin");

        if (fingerprintVerifyDialog == null) {
            fingerprintVerifyDialog = new FingerprintVerifyDialog(this);
        }
        fingerprintVerifyDialog.setContentText("请验证指纹");
        fingerprintVerifyDialog.setOnCancelButtonClickListener(new FingerprintVerifyDialog.OnDialogCancelButtonClickListener() {
            @Override
            public void onCancelClick(View v) {
                authenticate.stopAuthenticate();
            }
        });
//        fingerprintVerifyDialog.show();
        //
        try {
            FingerprintBean bean = new FingerprintBean();
            bean.setKeyAlias("lgy");
            bean.setSecretData("liangguiyu+123456");
            authenticate.setSecretMessage(bean);
        } catch (Exception e) {
            e.printStackTrace();
        }
        authenticate.authenticate();
    }


    private void saveLocalFingerprintInfo() {
    }

    @Override
    public void onAuthenticationFailed() {
        Log.e("lgygg", "HomeActivity->onAuthenticationFail");
        showFingerprintVerifyErrorInfo("指纹不匹配");
    }

    @Override
    public void onAuthenticationError(int errorCode, CharSequence errString) {
        Log.e("lgygg", "HomeActivity->onAuthenticationError-> errorCode:" + errorCode + ",errString:" + errString);
        if (fingerprintVerifyDialog != null && fingerprintVerifyDialog.isShowing()) {
            fingerprintVerifyDialog.dismiss();
        }
        showTipDialog(errorCode, errString.toString());

    }

    @Override
    public void onAuthenticationCancelled() {

    }

    private void showTipDialog(int errorCode, CharSequence errString) {
        if (fingerprintVerifyErrorTipDialog == null) {
            fingerprintVerifyErrorTipDialog = new CommonTipDialog(this);
        }
        fingerprintVerifyErrorTipDialog.setContentText("errorCode:" + errorCode + "," + errString);
        fingerprintVerifyErrorTipDialog.setSingleButton(true);
        fingerprintVerifyErrorTipDialog.setOnSingleConfirmButtonClickListener(new CommonTipDialog.OnDialogSingleConfirmButtonClickListener() {
            @Override
            public void onConfirmClick(View v) {
                authenticate.stopAuthenticate();
            }
        });
        fingerprintVerifyErrorTipDialog.show();
    }


    @Override
    public void onStartAuthentication() {

    }

    @Override
    public void onAuthenticationSucceeded(String sercet) {
        Log.e("lgygg", "sercet->"+sercet);
        if (fingerprintVerifyDialog != null && fingerprintVerifyDialog.isShowing()) {
            fingerprintVerifyDialog.dismiss();
            Toast.makeText(this, "指纹登录已开启", Toast.LENGTH_SHORT).show();
            isOpen = true;
            setSwitchStatus();
            saveLocalFingerprintInfo();
        }
    }

    @Override
    public void onAuthenticationHelp(int helpCode, CharSequence helpString) {
        Log.e("lgygg", "HomeActivity->onAuthenticationHelp-> helpCode:" + helpCode + ",helpString:" + helpString);
        showFingerprintVerifyErrorInfo(helpString.toString());
    }

    private void showFingerprintVerifyErrorInfo(String info) {
        if (fingerprintVerifyDialog != null && fingerprintVerifyDialog.isShowing()) {
            fingerprintVerifyDialog.setContentText(info);
        }
    }

    @Override
    public void onClick(View view) {
        switch (view.getId()) {
            case R.id.iv_fingerprint_login_switch:
                dealOnOff(isOpen);
                break;
        }
    }

    private void dealOnOff(boolean isOpen) {
        if (isOpen) {
            showCloseFingerprintTipDialog();
        } else {
            openFingerprintLogin();
        }
    }

    private void showCloseFingerprintTipDialog() {
        if (closeFingerprintTipDialog == null) {
            closeFingerprintTipDialog = new CommonTipDialog(this);
        }
        closeFingerprintTipDialog.setContentText("确定关闭指纹登录?");
        closeFingerprintTipDialog.setSingleButton(false);
        closeFingerprintTipDialog.setOnDialogButtonsClickListener(new CommonTipDialog.OnDialogButtonsClickListener() {
            @Override
            public void onCancelClick(View v) {

            }

            @Override
            public void onConfirmClick(View v) {
                closeFingerprintLogin();
            }
        });
        closeFingerprintTipDialog.show();
    }

    /**
     * @description 关闭指纹登录功能
     * @author lgygg
     */
    private void closeFingerprintLogin() {
        isOpen = false;
        setSwitchStatus();
        authenticate.closeAuthenticate();
    }

    private void setSwitchStatus() {
        iv_fingerprint_login_switch.setImageResource(isOpen ? R.drawable.switch_open_icon : R.drawable.switch_close_icon);
    }
}

```

